[{name:"Reading 6: Specifications",parent:{},text:[]},{name:"Objectives",parent:{name:"Reading 6: Specifications",count:0},text:["Understand pre/post conditions in method specs. write correct specs","write tests against a spec","know diff. between checked/unchecked exceptions in Java","how to use exceptions for special results"]},{name:"Introduction",parent:{name:"Reading 6: Specifications",count:0},text:["specs for teamwork. act as contract - implementer responsible for meeting contract, client relies on contract to use method.","pre/post conditions","exceptions"]},{name:"Specifications",parent:{name:"Introduction",id:"Part 1",count:2},text:[]},{name:"Why specs?",parent:{name:"Specifications",count:3},text:["diff. programmers on a team can have diff. specs in mind","help you find exactly where errors are","reading specs is easier than reading code","implementer has freedom to change implementation w/o telling client","preconditions in specs can rule out expensive checks"]},{name:"Firewall",parent:{name:"Why specs?","count":4},text:["shield client from details of code","shield implementer from details of usage","decoupling"]},{name:"Specification Structure",parent:{name:"Specifications",count:3},text:["preconditions, indicated by keyword requires","postconditions, indicated by keyword effects"]},{name:"Exceptions",parent:{name:"Introduction",id:"Part 2",count:2},text:[]},{name:"Exceptions for signaling bugs",parent:{name:"Exceptions",count:7}text:["exceptions when bugs happen (outside valid range, etc)"]},{name:"Exceptions for special results",parent:{name:"Exceptions",count:7},text:["exceptions when special things happen"]}]