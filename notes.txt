@Reading 6: Specifications()

@Objectives(#Reading 6: Specifications)
-Understand pre/post conditions in method specs. write correct specs
-write tests against a spec
-know diff. between checked/unchecked exceptions in Java
-how to use exceptions for special results

@Introduction(#Reading 6: Specifications)
-specs for teamwork. act as contract - implementer responsible for meeting contract, client relies on contract to use method.
-pre/post conditions
-exceptions

@Specifications(#Introduction, id="Part 1")

@Why specs?(#Specifications)
-diff. programmers on a team can have diff. specs in mind
-help you find exactly where errors are
-reading specs is easier than reading code
-implementer has freedom to change implementation w/o telling client
-preconditions in specs can rule out expensive checks

@Firewall(#Why specs?)
-shield client from details of code
-shield implementer from details of usage
-decoupling

@Specification Structure(#Specifications)
-preconditions, indicated by keyword requires
-postconditions, indicated by keyword effects

@Exceptions(#Introduction, id="Part 2")

@Exceptions for signaling bugs(#Exceptions)
-exceptions when bugs happen (outside valid range, etc)

@Exceptions for special results(#Exceptions)
-exceptions when special things happen